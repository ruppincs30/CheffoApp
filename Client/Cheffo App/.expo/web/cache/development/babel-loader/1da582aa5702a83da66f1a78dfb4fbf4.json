{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\asafs\\\\Documents\\\\GitHub\\\\reactHomeals\\\\node_modules\\\\react-native-elements\\\\src\\\\tooltip\\\\Tooltip.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { withTheme } from \"../config\";\nimport { ScreenWidth, ScreenHeight, isIOS } from \"../helpers\";\nimport Triangle from \"./Triangle\";\nimport getTooltipCoordinate, { getElementVisibleWidth } from \"./getTooltipCoordinate\";\n\nvar Tooltip = function (_React$PureComponent) {\n  _inherits(Tooltip, _React$PureComponent);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip() {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isVisible: false,\n      yOffset: 0,\n      xOffset: 0,\n      elementWidth: 0,\n      elementHeight: 0\n    };\n\n    _this.toggleTooltip = function () {\n      var onClose = _this.props.onClose;\n\n      _this.getElementPosition();\n\n      _this.setState(function (prevState) {\n        if (prevState.isVisible) {\n          onClose && onClose();\n        }\n\n        return {\n          isVisible: !prevState.isVisible\n        };\n      });\n    };\n\n    _this.wrapWithPress = function (toggleOnPress, toggleAction, children) {\n      if (toggleOnPress) {\n        return React.createElement(TouchableOpacity, _extends({}, _defineProperty({}, toggleAction, _this.toggleTooltip), {\n          delayLongPress: 250,\n          activeOpacity: 1,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 9\n          }\n        }), children);\n      }\n\n      return children;\n    };\n\n    _this.getTooltipStyle = function () {\n      var _objectSpread2;\n\n      var _this$state = _this.state,\n          yOffset = _this$state.yOffset,\n          xOffset = _this$state.xOffset,\n          elementHeight = _this$state.elementHeight,\n          elementWidth = _this$state.elementWidth;\n      var _this$props = _this.props,\n          height = _this$props.height,\n          backgroundColor = _this$props.backgroundColor,\n          width = _this$props.width,\n          withPointer = _this$props.withPointer,\n          containerStyle = _this$props.containerStyle;\n\n      var _getTooltipCoordinate = getTooltipCoordinate(xOffset, yOffset, elementWidth, elementHeight, ScreenWidth, ScreenHeight, width, height, withPointer),\n          x = _getTooltipCoordinate.x,\n          y = _getTooltipCoordinate.y;\n\n      return _objectSpread((_objectSpread2 = {\n        position: 'absolute'\n      }, _defineProperty(_objectSpread2, I18nManager.isRTL ? 'right' : 'left', x), _defineProperty(_objectSpread2, \"top\", y), _defineProperty(_objectSpread2, \"width\", width), _defineProperty(_objectSpread2, \"height\", height), _defineProperty(_objectSpread2, \"backgroundColor\", backgroundColor), _defineProperty(_objectSpread2, \"display\", 'flex'), _defineProperty(_objectSpread2, \"alignItems\", 'center'), _defineProperty(_objectSpread2, \"justifyContent\", 'center'), _defineProperty(_objectSpread2, \"flex\", 1), _defineProperty(_objectSpread2, \"borderRadius\", 10), _defineProperty(_objectSpread2, \"padding\", 10), _objectSpread2), containerStyle);\n    };\n\n    _this.renderPointer = function (tooltipY) {\n      var _this$state2 = _this.state,\n          yOffset = _this$state2.yOffset,\n          xOffset = _this$state2.xOffset,\n          elementHeight = _this$state2.elementHeight,\n          elementWidth = _this$state2.elementWidth;\n      var _this$props2 = _this.props,\n          backgroundColor = _this$props2.backgroundColor,\n          pointerColor = _this$props2.pointerColor;\n      var pastMiddleLine = yOffset > tooltipY;\n      return React.createElement(View, {\n        style: _defineProperty({\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2\n        }, I18nManager.isRTL ? 'right' : 'left', xOffset + getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 - 7.5),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      }, React.createElement(Triangle, {\n        style: {\n          borderBottomColor: pointerColor || backgroundColor\n        },\n        isDown: pastMiddleLine,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.getTooltipHighlightedButtonStyle = function () {\n      var _ref3;\n\n      var highlightColor = _this.props.highlightColor;\n      var _this$state3 = _this.state,\n          yOffset = _this$state3.yOffset,\n          xOffset = _this$state3.xOffset,\n          elementWidth = _this$state3.elementWidth,\n          elementHeight = _this$state3.elementHeight;\n      return _ref3 = {\n        position: 'absolute',\n        top: yOffset\n      }, _defineProperty(_ref3, I18nManager.isRTL ? 'right' : 'left', xOffset), _defineProperty(_ref3, \"backgroundColor\", highlightColor), _defineProperty(_ref3, \"overflow\", 'visible'), _defineProperty(_ref3, \"width\", elementWidth), _defineProperty(_ref3, \"height\", elementHeight), _ref3;\n    };\n\n    _this.renderTouchableHighlightedButton = function () {\n      var TooltipHighlightedButtonStyle = _this.getTooltipHighlightedButtonStyle();\n\n      return React.createElement(TouchableOpacity, {\n        testID: \"tooltipTouchableHighlightedButton\",\n        onPress: function onPress() {\n          return _this.toggleTooltip();\n        },\n        style: TooltipHighlightedButtonStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }\n      }, _this.props.children);\n    };\n\n    _this.renderStaticHighlightedButton = function () {\n      var TooltipHighlightedButtonStyle = _this.getTooltipHighlightedButtonStyle();\n\n      return React.createElement(View, {\n        style: TooltipHighlightedButtonStyle,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 7\n        }\n      }, _this.props.children);\n    };\n\n    _this.renderHighlightedButton = function () {\n      var closeOnlyOnBackdropPress = _this.props.closeOnlyOnBackdropPress;\n\n      if (closeOnlyOnBackdropPress) {\n        return _this.renderTouchableHighlightedButton();\n      } else {\n        return _this.renderStaticHighlightedButton();\n      }\n    };\n\n    _this.renderContent = function (withTooltip) {\n      var _this$props3 = _this.props,\n          popover = _this$props3.popover,\n          withPointer = _this$props3.withPointer,\n          toggleOnPress = _this$props3.toggleOnPress,\n          toggleAction = _this$props3.toggleAction;\n\n      if (!withTooltip) {\n        return _this.wrapWithPress(toggleOnPress, toggleAction, _this.props.children);\n      }\n\n      var tooltipStyle = _this.getTooltipStyle();\n\n      return React.createElement(View, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 7\n        }\n      }, _this.renderHighlightedButton(), withPointer && _this.renderPointer(tooltipStyle.top), React.createElement(View, {\n        style: tooltipStyle,\n        testID: \"tooltipPopoverContainer\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      }, popover));\n    };\n\n    _this.getElementPosition = function () {\n      var skipAndroidStatusBar = _this.props.skipAndroidStatusBar;\n      _this.renderedElement && _this.renderedElement.measure(function (frameOffsetX, frameOffsetY, width, height, pageOffsetX, pageOffsetY) {\n        _this.setState({\n          xOffset: pageOffsetX,\n          yOffset: isIOS || skipAndroidStatusBar ? pageOffsetY : pageOffsetY - StatusBar.currentHeight,\n          elementWidth: width,\n          elementHeight: height\n        });\n      });\n    };\n\n    _this.renderStaticModalContent = function () {\n      var _this$props4 = _this.props,\n          withOverlay = _this$props4.withOverlay,\n          overlayColor = _this$props4.overlayColor;\n      return React.createElement(Fragment, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.container(withOverlay, overlayColor),\n        onPress: _this.toggleTooltip,\n        activeOpacity: 1,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.closeOnlyOnBackdropPressViewWrapper,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 9\n        }\n      }, _this.renderContent(true)));\n    };\n\n    _this.renderTogglingModalContent = function () {\n      var _this$props5 = _this.props,\n          withOverlay = _this$props5.withOverlay,\n          overlayColor = _this$props5.overlayColor;\n      return React.createElement(TouchableOpacity, {\n        style: styles.container(withOverlay, overlayColor),\n        onPress: _this.toggleTooltip,\n        activeOpacity: 1,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 7\n        }\n      }, _this.renderContent(true));\n    };\n\n    _this.renderModalContent = function () {\n      var closeOnlyOnBackdropPress = _this.props.closeOnlyOnBackdropPress;\n\n      if (closeOnlyOnBackdropPress) {\n        return _this.renderStaticModalContent();\n      } else {\n        return _this.renderTogglingModalContent();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      requestAnimationFrame(this.getElementPosition);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isVisible = this.state.isVisible;\n      var _this$props6 = this.props,\n          onClose = _this$props6.onClose,\n          onOpen = _this$props6.onOpen,\n          ModalComponent = _this$props6.ModalComponent;\n      return React.createElement(View, {\n        collapsable: false,\n        ref: function ref(e) {\n          _this2.renderedElement = e;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 7\n        }\n      }, this.renderContent(false), React.createElement(ModalComponent, {\n        animationType: \"fade\",\n        visible: isVisible,\n        transparent: true,\n        onDismiss: onClose,\n        onShow: onOpen,\n        onRequestClose: onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 9\n        }\n      }, this.renderModalContent()));\n    }\n  }]);\n\n  return Tooltip;\n}(React.PureComponent);\n\nTooltip.propTypes = {\n  children: PropTypes.element,\n  withPointer: PropTypes.bool,\n  popover: PropTypes.element,\n  toggleOnPress: PropTypes.bool,\n  toggleAction: PropTypes.oneOf(['onPress', 'onLongPress']),\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  pointerColor: PropTypes.string,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  overlayColor: PropTypes.string,\n  withOverlay: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  highlightColor: PropTypes.string,\n  skipAndroidStatusBar: PropTypes.bool,\n  ModalComponent: PropTypes.elementType,\n  closeOnlyOnBackdropPress: PropTypes.bool\n};\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  toggleAction: 'onPress',\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: function onClose() {},\n  onOpen: function onOpen() {},\n  skipAndroidStatusBar: false,\n  ModalComponent: Modal,\n  closeOnlyOnBackdropPress: false\n};\nvar styles = {\n  container: function container(withOverlay, overlayColor) {\n    return {\n      backgroundColor: withOverlay ? overlayColor : 'transparent',\n      flex: 1\n    };\n  },\n  closeOnlyOnBackdropPressViewWrapper: {\n    position: 'absolute'\n  }\n};\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');","map":{"version":3,"sources":["C:/Users/asafs/Documents/GitHub/reactHomeals/node_modules/react-native-elements/src/tooltip/Tooltip.js"],"names":["React","Fragment","PropTypes","withTheme","ScreenWidth","ScreenHeight","isIOS","Triangle","getTooltipCoordinate","getElementVisibleWidth","Tooltip","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","onClose","props","getElementPosition","setState","prevState","wrapWithPress","toggleOnPress","toggleAction","children","getTooltipStyle","height","backgroundColor","width","withPointer","containerStyle","x","y","position","I18nManager","isRTL","renderPointer","tooltipY","pointerColor","pastMiddleLine","top","borderBottomColor","getTooltipHighlightedButtonStyle","highlightColor","renderTouchableHighlightedButton","TooltipHighlightedButtonStyle","renderStaticHighlightedButton","renderHighlightedButton","closeOnlyOnBackdropPress","renderContent","withTooltip","popover","tooltipStyle","skipAndroidStatusBar","renderedElement","measure","frameOffsetX","frameOffsetY","pageOffsetX","pageOffsetY","StatusBar","currentHeight","renderStaticModalContent","withOverlay","overlayColor","styles","container","closeOnlyOnBackdropPressViewWrapper","renderTogglingModalContent","renderModalContent","requestAnimationFrame","onOpen","ModalComponent","e","PureComponent","propTypes","element","bool","oneOf","number","oneOfType","string","object","array","func","elementType","defaultProps","Modal","flex"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  TouchableOpacity,\r\n  Modal,\r\n  View,\r\n  StatusBar,\r\n  I18nManager,\r\n} from 'react-native';\r\n\r\nimport { withTheme } from '../config';\r\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\r\n\r\nimport Triangle from './Triangle';\r\nimport getTooltipCoordinate, {\r\n  getElementVisibleWidth,\r\n} from './getTooltipCoordinate';\r\n\r\nclass Tooltip extends React.PureComponent {\r\n  state = {\r\n    isVisible: false,\r\n    yOffset: 0,\r\n    xOffset: 0,\r\n    elementWidth: 0,\r\n    elementHeight: 0,\r\n  };\r\n\r\n  renderedElement;\r\n\r\n  toggleTooltip = () => {\r\n    const { onClose } = this.props;\r\n    this.getElementPosition();\r\n    this.setState((prevState) => {\r\n      if (prevState.isVisible) {\r\n        onClose && onClose();\r\n      }\r\n\r\n      return { isVisible: !prevState.isVisible };\r\n    });\r\n  };\r\n\r\n  wrapWithPress = (toggleOnPress, toggleAction, children) => {\r\n    if (toggleOnPress) {\r\n      return (\r\n        <TouchableOpacity\r\n          {...{ [toggleAction]: this.toggleTooltip }}\r\n          delayLongPress={250}\r\n          activeOpacity={1}\r\n        >\r\n          {children}\r\n        </TouchableOpacity>\r\n      );\r\n    }\r\n\r\n    return children;\r\n  };\r\n\r\n  getTooltipStyle = () => {\r\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\r\n    const {\r\n      height,\r\n      backgroundColor,\r\n      width,\r\n      withPointer,\r\n      containerStyle,\r\n    } = this.props;\r\n\r\n    const { x, y } = getTooltipCoordinate(\r\n      xOffset,\r\n      yOffset,\r\n      elementWidth,\r\n      elementHeight,\r\n      ScreenWidth,\r\n      ScreenHeight,\r\n      width,\r\n      height,\r\n      withPointer\r\n    );\r\n\r\n    return {\r\n      position: 'absolute',\r\n      [I18nManager.isRTL ? 'right' : 'left']: x,\r\n      top: y,\r\n      width,\r\n      height,\r\n      backgroundColor,\r\n      // default styles\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      flex: 1,\r\n      borderRadius: 10,\r\n      padding: 10,\r\n      ...containerStyle,\r\n    };\r\n  };\r\n\r\n  renderPointer = (tooltipY) => {\r\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\r\n    const { backgroundColor, pointerColor } = this.props;\r\n    const pastMiddleLine = yOffset > tooltipY;\r\n\r\n    return (\r\n      <View\r\n        style={{\r\n          position: 'absolute',\r\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\r\n          [I18nManager.isRTL ? 'right' : 'left']:\r\n            xOffset +\r\n            getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\r\n            7.5,\r\n        }}\r\n      >\r\n        <Triangle\r\n          style={{ borderBottomColor: pointerColor || backgroundColor }}\r\n          isDown={pastMiddleLine}\r\n        />\r\n      </View>\r\n    );\r\n  };\r\n  getTooltipHighlightedButtonStyle = () => {\r\n    const { highlightColor } = this.props;\r\n    const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\r\n    return {\r\n      position: 'absolute',\r\n      top: yOffset,\r\n      [I18nManager.isRTL ? 'right' : 'left']: xOffset,\r\n      backgroundColor: highlightColor,\r\n      overflow: 'visible',\r\n      width: elementWidth,\r\n      height: elementHeight,\r\n    };\r\n  };\r\n  renderTouchableHighlightedButton = () => {\r\n    const TooltipHighlightedButtonStyle = this.getTooltipHighlightedButtonStyle();\r\n    return (\r\n      <TouchableOpacity\r\n        testID=\"tooltipTouchableHighlightedButton\"\r\n        onPress={() => this.toggleTooltip()}\r\n        style={TooltipHighlightedButtonStyle}\r\n      >\r\n        {this.props.children}\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n  renderStaticHighlightedButton = () => {\r\n    const TooltipHighlightedButtonStyle = this.getTooltipHighlightedButtonStyle();\r\n    return (\r\n      <View style={TooltipHighlightedButtonStyle}>{this.props.children}</View>\r\n    );\r\n  };\r\n\r\n  renderHighlightedButton = () => {\r\n    const { closeOnlyOnBackdropPress } = this.props;\r\n    if (closeOnlyOnBackdropPress) {\r\n      return this.renderTouchableHighlightedButton();\r\n    } else {\r\n      return this.renderStaticHighlightedButton();\r\n    }\r\n  };\r\n\r\n  renderContent = (withTooltip) => {\r\n    const { popover, withPointer, toggleOnPress, toggleAction } = this.props;\r\n\r\n    if (!withTooltip) {\r\n      return this.wrapWithPress(\r\n        toggleOnPress,\r\n        toggleAction,\r\n        this.props.children\r\n      );\r\n    }\r\n\r\n    const tooltipStyle = this.getTooltipStyle();\r\n    return (\r\n      <View>\r\n        {this.renderHighlightedButton()}\r\n        {withPointer && this.renderPointer(tooltipStyle.top)}\r\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\r\n          {popover}\r\n        </View>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    // wait to compute onLayout values.\r\n    requestAnimationFrame(this.getElementPosition);\r\n  }\r\n\r\n  getElementPosition = () => {\r\n    const { skipAndroidStatusBar } = this.props;\r\n    this.renderedElement &&\r\n      this.renderedElement.measure(\r\n        (\r\n          frameOffsetX,\r\n          frameOffsetY,\r\n          width,\r\n          height,\r\n          pageOffsetX,\r\n          pageOffsetY\r\n        ) => {\r\n          this.setState({\r\n            xOffset: pageOffsetX,\r\n            yOffset:\r\n              isIOS || skipAndroidStatusBar\r\n                ? pageOffsetY\r\n                : pageOffsetY - StatusBar.currentHeight,\r\n            elementWidth: width,\r\n            elementHeight: height,\r\n          });\r\n        }\r\n      );\r\n  };\r\n\r\n  renderStaticModalContent = () => {\r\n    const { withOverlay, overlayColor } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        <TouchableOpacity\r\n          style={styles.container(withOverlay, overlayColor)}\r\n          onPress={this.toggleTooltip}\r\n          activeOpacity={1}\r\n        />\r\n        <View style={styles.closeOnlyOnBackdropPressViewWrapper}>\r\n          {this.renderContent(true)}\r\n        </View>\r\n      </Fragment>\r\n    );\r\n  };\r\n  renderTogglingModalContent = () => {\r\n    const { withOverlay, overlayColor } = this.props;\r\n\r\n    return (\r\n      <TouchableOpacity\r\n        style={styles.container(withOverlay, overlayColor)}\r\n        onPress={this.toggleTooltip}\r\n        activeOpacity={1}\r\n      >\r\n        {this.renderContent(true)}\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  renderModalContent = () => {\r\n    const { closeOnlyOnBackdropPress } = this.props;\r\n    if (closeOnlyOnBackdropPress) {\r\n      return this.renderStaticModalContent();\r\n    } else {\r\n      return this.renderTogglingModalContent();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { isVisible } = this.state;\r\n    const { onClose, onOpen, ModalComponent } = this.props;\r\n\r\n    return (\r\n      <View\r\n        collapsable={false}\r\n        ref={(e) => {\r\n          this.renderedElement = e;\r\n        }}\r\n      >\r\n        {this.renderContent(false)}\r\n        <ModalComponent\r\n          animationType=\"fade\"\r\n          visible={isVisible}\r\n          transparent\r\n          onDismiss={onClose}\r\n          onShow={onOpen}\r\n          onRequestClose={onClose}\r\n        >\r\n          {this.renderModalContent()}\r\n        </ModalComponent>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nTooltip.propTypes = {\r\n  children: PropTypes.element,\r\n  withPointer: PropTypes.bool,\r\n  popover: PropTypes.element,\r\n  toggleOnPress: PropTypes.bool,\r\n  toggleAction: PropTypes.oneOf(['onPress', 'onLongPress']),\r\n  height: PropTypes.number,\r\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n  pointerColor: PropTypes.string,\r\n  onClose: PropTypes.func,\r\n  onOpen: PropTypes.func,\r\n  overlayColor: PropTypes.string,\r\n  withOverlay: PropTypes.bool,\r\n  backgroundColor: PropTypes.string,\r\n  highlightColor: PropTypes.string,\r\n  skipAndroidStatusBar: PropTypes.bool,\r\n  ModalComponent: PropTypes.elementType,\r\n  closeOnlyOnBackdropPress: PropTypes.bool,\r\n};\r\n\r\nTooltip.defaultProps = {\r\n  withOverlay: true,\r\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\r\n  highlightColor: 'transparent',\r\n  withPointer: true,\r\n  toggleOnPress: true,\r\n  toggleAction: 'onPress',\r\n  height: 40,\r\n  width: 150,\r\n  containerStyle: {},\r\n  backgroundColor: '#617080',\r\n  onClose: () => {},\r\n  onOpen: () => {},\r\n  skipAndroidStatusBar: false,\r\n  ModalComponent: Modal,\r\n  closeOnlyOnBackdropPress: false,\r\n};\r\n\r\nconst styles = {\r\n  container: (withOverlay, overlayColor) => ({\r\n    backgroundColor: withOverlay ? overlayColor : 'transparent',\r\n    flex: 1,\r\n  }),\r\n  closeOnlyOnBackdropPressViewWrapper: {\r\n    position: 'absolute',\r\n  },\r\n};\r\n\r\nexport { Tooltip };\r\nexport default withTheme(Tooltip, 'Tooltip');\r\n"]},"metadata":{},"sourceType":"module"}