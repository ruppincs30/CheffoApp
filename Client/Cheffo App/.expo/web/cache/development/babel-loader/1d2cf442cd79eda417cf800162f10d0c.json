{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n  var R, dLat, dLon, a, c, d;\n  return _regeneratorRuntime.async(function getDistanceFromLatLonInKm$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          R = 6371;\n          dLat = deg2rad(lat2 - lat1);\n          dLon = deg2rad(lon2 - lon1);\n          a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n          c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n          d = R * c;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(d);\n\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}","map":{"version":3,"sources":["C:/Users/Shachar/Desktop/P/reactHomeals/helpers/calcDis.js"],"names":["getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI"],"mappings":";AACA,OAAO,SAAeA,yBAAf,CAAyCC,IAAzC,EAA+CC,IAA/C,EAAqDC,IAArD,EAA2DC,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,CADD,GACK,IADL;AAECC,UAAAA,IAFD,GAEQC,OAAO,CAACJ,IAAI,GAAGF,IAAR,CAFf;AAGCO,UAAAA,IAHD,GAGQD,OAAO,CAACH,IAAI,GAAGF,IAAR,CAHf;AAICO,UAAAA,CAJD,GAKCC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,IAAqBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,CAArB,GACAI,IAAI,CAACE,GAAL,CAASL,OAAO,CAACN,IAAD,CAAhB,IAA0BS,IAAI,CAACE,GAAL,CAASL,OAAO,CAACJ,IAAD,CAAhB,CAA1B,GACAO,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CADA,GACqBE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CAPtB;AAQCK,UAAAA,CARD,GAQK,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAIN,CAAd,CAAzB,CART;AASCO,UAAAA,CATD,GASKX,CAAC,GAAGQ,CATT;AAAA;AAAA,2CAUUG,CAVV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaP,SAAST,OAAT,CAAiBU,GAAjB,EAAsB;AAClB,SAAOA,GAAG,IAAIP,IAAI,CAACQ,EAAL,GAAU,GAAd,CAAV;AACH","sourcesContent":["\r\nexport async function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\r\n    var R = 6371; // Radius of the earth in km\r\n    var dLat = deg2rad(lat2 - lat1);  // deg2rad below\r\n    var dLon = deg2rad(lon2 - lon1);\r\n    var a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = R * c; // Distance in km\r\n    return await d;\r\n}\r\n\r\nfunction deg2rad(deg) {\r\n    return deg * (Math.PI / 180)\r\n}\r\n\r\n\r\n  "]},"metadata":{},"sourceType":"module"}