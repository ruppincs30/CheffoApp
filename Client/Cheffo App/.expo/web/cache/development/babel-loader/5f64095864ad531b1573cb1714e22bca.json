{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\asafs\\\\Documents\\\\GitHub\\\\reactHomeals\\\\node_modules\\\\react-native-elements\\\\src\\\\config\\\\ThemeProvider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\nimport colors from \"./colors\";\nimport darkColors from \"./colorsDark\";\nexport var ThemeContext = React.createContext({\n  theme: {\n    colors: colors\n  }\n});\n\nvar ThemeProvider = function (_React$Component) {\n  _inherits(ThemeProvider, _React$Component);\n\n  var _super = _createSuper(ThemeProvider);\n\n  function ThemeProvider(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeProvider);\n\n    _this = _super.call(this, props);\n\n    _this.updateTheme = function (updates) {\n      _this.setState(function (_ref) {\n        var theme = _ref.theme;\n        return {\n          theme: deepmerge(theme, updates)\n        };\n      });\n    };\n\n    _this.replaceTheme = function (theme) {\n      _this.setState(function () {\n        return {\n          theme: deepmerge(_this.defaultTheme, theme)\n        };\n      });\n    };\n\n    _this.getTheme = function () {\n      return _this.state.theme;\n    };\n\n    var defaultColors = props.useDark ? darkColors : colors;\n    _this.defaultTheme = deepmerge({\n      colors: defaultColors\n    }, props.theme);\n    _this.state = {\n      theme: _this.defaultTheme,\n      useDark: props.useDark\n    };\n    return _this;\n  }\n\n  _createClass(ThemeProvider, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ThemeContext.Provider, {\n        value: {\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var useDark = props.useDark;\n\n      if (useDark !== state.useDark) {\n        var defaultColors = useDark ? darkColors : colors;\n        return {\n          theme: deepmerge(state.theme, deepmerge({\n            colors: defaultColors\n          }, props.theme)),\n          useDark: useDark\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ThemeProvider;\n}(React.Component);\n\nexport { ThemeProvider as default };\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  useDark: PropTypes.bool\n};\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false\n};\nexport var ThemeConsumer = ThemeContext.Consumer;","map":{"version":3,"sources":["C:/Users/asafs/Documents/GitHub/reactHomeals/node_modules/react-native-elements/src/config/ThemeProvider.js"],"names":["React","PropTypes","deepmerge","colors","darkColors","ThemeContext","createContext","theme","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","defaultColors","useDark","children","Component","propTypes","object","node","isRequired","bool","defaultProps","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAOC,MAAP;AACA,OAAOC,UAAP;AAEA,OAAO,IAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAoB;AAC9CC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,MAAM,EAANA;AADK;AADuC,CAApB,CAArB;;IAMcK,a;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAoCnBC,WApCmB,GAoCL,UAACC,OAAD,EAAa;AACzB,YAAKC,QAAL,CAAc;AAAA,YAAGL,KAAH,QAAGA,KAAH;AAAA,eAAgB;AAC5BA,UAAAA,KAAK,EAAEL,SAAS,CAACK,KAAD,EAAQI,OAAR;AADY,SAAhB;AAAA,OAAd;AAGD,KAxCkB;;AAAA,UA0CnBE,YA1CmB,GA0CJ,UAACN,KAAD,EAAW;AACxB,YAAKK,QAAL,CAAc;AAAA,eAAO;AACnBL,UAAAA,KAAK,EAAEL,SAAS,CAAC,MAAKY,YAAN,EAAoBP,KAApB;AADG,SAAP;AAAA,OAAd;AAGD,KA9CkB;;AAAA,UAgDnBQ,QAhDmB,GAgDR;AAAA,aAAM,MAAKC,KAAL,CAAWT,KAAjB;AAAA,KAhDQ;;AAGjB,QAAMU,aAAa,GAAGR,KAAK,CAACS,OAAN,GAAgBd,UAAhB,GAA6BD,MAAnD;AAEA,UAAKW,YAAL,GAAoBZ,SAAS,CAC3B;AACEC,MAAAA,MAAM,EAAEc;AADV,KAD2B,EAI3BR,KAAK,CAACF,KAJqB,CAA7B;AAMA,UAAKS,KAAL,GAAa;AACXT,MAAAA,KAAK,EAAE,MAAKO,YADD;AAEXI,MAAAA,OAAO,EAAET,KAAK,CAACS;AAFJ,KAAb;AAXiB;AAelB;;;;6BAmCQ;AACP,aACE,oBAAC,YAAD,CAAc,QAAd;AACE,QAAA,KAAK,EAAE;AACLX,UAAAA,KAAK,EAAE,KAAKS,KAAL,CAAWT,KADb;AAELG,UAAAA,WAAW,EAAE,KAAKA,WAFb;AAGLG,UAAAA,YAAY,EAAE,KAAKA;AAHd,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOG,KAAKJ,KAAL,CAAWU,QAPd,CADF;AAWD;;;6CA7C+BV,K,EAAOO,K,EAAO;AAAA,UACpCE,OADoC,GACxBT,KADwB,CACpCS,OADoC;;AAE5C,UAAIA,OAAO,KAAKF,KAAK,CAACE,OAAtB,EAA+B;AAC7B,YAAMD,aAAa,GAAGC,OAAO,GAAGd,UAAH,GAAgBD,MAA7C;AACA,eAAO;AACLI,UAAAA,KAAK,EAAEL,SAAS,CACdc,KAAK,CAACT,KADQ,EAEdL,SAAS,CACP;AACEC,YAAAA,MAAM,EAAEc;AADV,WADO,EAIPR,KAAK,CAACF,KAJC,CAFK,CADX;AAULW,UAAAA,OAAO,EAAPA;AAVK,SAAP;AAYD;;AACD,aAAO,IAAP;AACD;;;;EApCwClB,KAAK,CAACoB,S;;SAA5BZ,a;AAkErBA,aAAa,CAACa,SAAd,GAA0B;AACxBd,EAAAA,KAAK,EAAEN,SAAS,CAACqB,MADO;AAExBH,EAAAA,QAAQ,EAAElB,SAAS,CAACsB,IAAV,CAAeC,UAFD;AAGxBN,EAAAA,OAAO,EAAEjB,SAAS,CAACwB;AAHK,CAA1B;AAMAjB,aAAa,CAACkB,YAAd,GAA6B;AAC3BnB,EAAAA,KAAK,EAAE,EADoB;AAE3BW,EAAAA,OAAO,EAAE;AAFkB,CAA7B;AAKA,OAAO,IAAMS,aAAa,GAAGtB,YAAY,CAACuB,QAAnC","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport deepmerge from 'deepmerge';\r\n\r\nimport colors from './colors';\r\nimport darkColors from './colorsDark';\r\n\r\nexport const ThemeContext = React.createContext({\r\n  theme: {\r\n    colors,\r\n  },\r\n});\r\n\r\nexport default class ThemeProvider extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const defaultColors = props.useDark ? darkColors : colors;\r\n\r\n    this.defaultTheme = deepmerge(\r\n      {\r\n        colors: defaultColors,\r\n      },\r\n      props.theme\r\n    );\r\n    this.state = {\r\n      theme: this.defaultTheme,\r\n      useDark: props.useDark,\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    const { useDark } = props;\r\n    if (useDark !== state.useDark) {\r\n      const defaultColors = useDark ? darkColors : colors;\r\n      return {\r\n        theme: deepmerge(\r\n          state.theme,\r\n          deepmerge(\r\n            {\r\n              colors: defaultColors,\r\n            },\r\n            props.theme\r\n          )\r\n        ),\r\n        useDark,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n  updateTheme = (updates) => {\r\n    this.setState(({ theme }) => ({\r\n      theme: deepmerge(theme, updates),\r\n    }));\r\n  };\r\n\r\n  replaceTheme = (theme) => {\r\n    this.setState(() => ({\r\n      theme: deepmerge(this.defaultTheme, theme),\r\n    }));\r\n  };\r\n\r\n  getTheme = () => this.state.theme;\r\n\r\n  render() {\r\n    return (\r\n      <ThemeContext.Provider\r\n        value={{\r\n          theme: this.state.theme,\r\n          updateTheme: this.updateTheme,\r\n          replaceTheme: this.replaceTheme,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </ThemeContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nThemeProvider.propTypes = {\r\n  theme: PropTypes.object,\r\n  children: PropTypes.node.isRequired,\r\n  useDark: PropTypes.bool,\r\n};\r\n\r\nThemeProvider.defaultProps = {\r\n  theme: {},\r\n  useDark: false,\r\n};\r\n\r\nexport const ThemeConsumer = ThemeContext.Consumer;\r\n"]},"metadata":{},"sourceType":"module"}