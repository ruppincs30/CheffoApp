{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\asafs\\\\Documents\\\\github\\\\reactHomeals\\\\node_modules\\\\react-native-circle-floatmenu\\\\CircleButtonItem.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PropTypes from 'prop-types';\n\nvar CircleButtonItem = function (_Component) {\n  _inherits(CircleButtonItem, _Component);\n\n  var _super = _createSuper(CircleButtonItem);\n\n  function CircleButtonItem() {\n    _classCallCheck(this, CircleButtonItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CircleButtonItem, [{\n    key: \"render\",\n    value: function render() {\n      var offsetX = this.props.radius * Math.cos(this.props.angle);\n      var offsetY = this.props.radius * Math.sin(this.props.angle);\n      return React.createElement(Animated.View, {\n        style: [{\n          opacity: this.props.anim,\n          width: this.props.size,\n          height: this.props.size,\n          transform: [{\n            translateY: this.props.anim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, offsetY]\n            })\n          }, {\n            translateX: this.props.anim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, offsetX]\n            })\n          }, {\n            rotate: this.props.anim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [this.props.startDegree + \"deg\", this.props.endDegree + \"deg\"]\n            })\n          }, {\n            scale: this.props.anim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 1]\n            })\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: {\n          flex: 1\n        },\n        activeOpacity: this.props.activeOpacity || 0.85,\n        onPress: this.props.onPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: [styles.circleButton, {\n          width: this.props.size,\n          height: this.props.size,\n          borderRadius: this.props.size / 2,\n          backgroundColor: this.props.buttonColor\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, this.props.children)));\n    }\n  }]);\n\n  return CircleButtonItem;\n}(Component);\n\nexport { CircleButtonItem as default };\nCircleButtonItem.propTypes = {\n  angle: PropTypes.number,\n  radius: PropTypes.number,\n  buttonColor: PropTypes.string,\n  onPress: PropTypes.func,\n  children: PropTypes.node.isRequired,\n  startDegree: PropTypes.number,\n  endDegree: PropTypes.number\n};\nCircleButtonItem.defaultProps = {\n  onPress: function onPress() {},\n  startDegree: 0,\n  endDegree: 720\n};\nvar styles = StyleSheet.create({\n  circleButton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n    paddingTop: 2,\n    shadowOpacity: 0.3,\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowColor: '#444',\n    shadowRadius: 1,\n    backgroundColor: 'red',\n    position: 'absolute'\n  }\n});","map":{"version":3,"sources":["C:/Users/asafs/Documents/github/reactHomeals/node_modules/react-native-circle-floatmenu/CircleButtonItem.js"],"names":["React","Component","PropTypes","CircleButtonItem","offsetX","props","radius","Math","cos","angle","offsetY","sin","opacity","anim","width","size","height","transform","translateY","interpolate","inputRange","outputRange","translateX","rotate","startDegree","endDegree","scale","flex","activeOpacity","onPress","styles","circleButton","borderRadius","backgroundColor","buttonColor","children","propTypes","number","string","func","node","isRequired","defaultProps","StyleSheet","create","justifyContent","alignItems","flexDirection","paddingTop","shadowOpacity","shadowOffset","shadowColor","shadowRadius","position"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n} from 'react';\nimport {\n  StyleSheet,\n  View,\n  Animated,\n  TouchableOpacity,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nexport default class CircleButtonItem extends Component {\n\n  render() {\n    const offsetX = this.props.radius * Math.cos(this.props.angle);\n    const offsetY = this.props.radius * Math.sin(this.props.angle);\n    return (\n      <Animated.View\n        style={[{\n          opacity: this.props.anim,\n          width: this.props.size,\n          height: this.props.size,\n          transform: [\n            {\n              translateY: this.props.anim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, offsetY],\n              }) },\n            {\n              translateX: this.props.anim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, offsetX],\n              }) },\n            {\n              rotate: this.props.anim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [`${this.props.startDegree}deg`, `${this.props.endDegree}deg`],\n              }) },\n            {\n              scale: this.props.anim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, 1],\n              }) },\n          ]\n        }]}\n      >\n        <TouchableOpacity style={{flex:1}} activeOpacity={this.props.activeOpacity || 0.85} onPress={this.props.onPress}>\n          <View\n            style={[styles.circleButton,{\n              width: this.props.size,\n              height: this.props.size,\n              borderRadius: this.props.size / 2,\n              backgroundColor: this.props.buttonColor,\n            }]}\n          >\n            {this.props.children}\n          </View>\n        </TouchableOpacity>\n      </Animated.View>\n    );\n  }\n\n}\n\nCircleButtonItem.propTypes = {\n  angle: PropTypes.number,\n  radius: PropTypes.number,\n  buttonColor: PropTypes.string,\n  onPress: PropTypes.func,\n  children: PropTypes.node.isRequired,\n  startDegree: PropTypes.number,\n  endDegree: PropTypes.number,\n};\n\nCircleButtonItem.defaultProps = {\n  onPress: () => {},\n  startDegree: 0,\n  endDegree: 720\n};\n\nconst styles = StyleSheet.create({\n  circleButton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n    paddingTop: 2,\n    shadowOpacity: 0.3,\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowColor: '#444',\n    shadowRadius: 1,\n    backgroundColor: 'red',\n    position: 'absolute',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}